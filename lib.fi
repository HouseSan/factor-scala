( _ ) false ;@
( 1 ^ _ ) true ;@
( false = ) not ;@@
( ( _ false ) ( ) 2 ^ @ @ ) and ;@@
( ( ) ( _ true ) 2 ^ @ @ ) or ;@@
( ( ) ( not ) 2 ^ @ @ ) xor ;@@

( 0 - ) neg ;@@
( 1 1^ - ) decr ;@@
( 1 + ) incr ;@@
( real 1^ real =) eq ;@@

(();) clear ;@@
(size 0 =) empty ;@@

(0$~) push ;@@
(0$^) pop ;@@
($#) get ;@@
(0$#) top ;@@

args;
(\args 1^ push) pushA ;@@
(\args pop) popA ;@@
(\args 1^ get) getA ;@@
(\args top) topA ;@@

((args 1# $; () args $;) (0# 0$^ pushA Sreverse) 2#()$= not @@) Sreverse ;@@
reverseArgs;
(empty not (reverseArgs @ () reverseArgs $;) (reverseArgs 1^ push reverse) 2^@@) reverse ;@@

STASH;
(STASH;) stash;@@
(STASH@) unstash;@@

mapArgs;
(pushA empty not (popA _) (topA @ mapArgs 1^ push popA map mapArgs pop) 2^@@) map ;@@
(pushA pushA stash topA @ 1 getA map topA ; unstash popA popA _) Smap ;@@

(pushA size 1 = not (popA _) (topA @ popA reduce) 2^@@) reduce ;@@
(pushA pushA stash popA @ popA reduce pushA unstash popA) Sreduce ;@@

((__) (decr pushA 0# pushA @ popA popA repeat) 2#0<@@) repeat ;@@
